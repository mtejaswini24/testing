// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=services
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "job-portal-api/internal/models"
	reflect "reflect"

	v5 "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceMethod is a mock of ServiceMethod interface.
type MockServiceMethod struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMethodMockRecorder
}

// MockServiceMethodMockRecorder is the mock recorder for MockServiceMethod.
type MockServiceMethodMockRecorder struct {
	mock *MockServiceMethod
}

// NewMockServiceMethod creates a new mock instance.
func NewMockServiceMethod(ctrl *gomock.Controller) *MockServiceMethod {
	mock := &MockServiceMethod{ctrl: ctrl}
	mock.recorder = &MockServiceMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceMethod) EXPECT() *MockServiceMethodMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockServiceMethod) CreateCompany(ctx context.Context, nc models.NewCompany) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, nc)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockServiceMethodMockRecorder) CreateCompany(ctx, nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockServiceMethod)(nil).CreateCompany), ctx, nc)
}

// CreateJob mocks base method.
func (m *MockServiceMethod) CreateJob(ctx context.Context, nj models.NewJob, cid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, nj, cid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockServiceMethodMockRecorder) CreateJob(ctx, nj, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockServiceMethod)(nil).CreateJob), ctx, nj, cid)
}

// CreateUser mocks base method.
func (m *MockServiceMethod) CreateUser(ctx context.Context, nu models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, nu)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMethodMockRecorder) CreateUser(ctx, nu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockServiceMethod)(nil).CreateUser), ctx, nu)
}

// FetchCompanies mocks base method.
func (m *MockServiceMethod) FetchCompanies() ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCompanies")
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCompanies indicates an expected call of FetchCompanies.
func (mr *MockServiceMethodMockRecorder) FetchCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCompanies", reflect.TypeOf((*MockServiceMethod)(nil).FetchCompanies))
}

// FetchCompanyById mocks base method.
func (m *MockServiceMethod) FetchCompanyById(cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCompanyById", cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCompanyById indicates an expected call of FetchCompanyById.
func (mr *MockServiceMethodMockRecorder) FetchCompanyById(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCompanyById", reflect.TypeOf((*MockServiceMethod)(nil).FetchCompanyById), cid)
}

// FetchJob mocks base method.
func (m *MockServiceMethod) FetchJob() ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJob")
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJob indicates an expected call of FetchJob.
func (mr *MockServiceMethodMockRecorder) FetchJob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJob", reflect.TypeOf((*MockServiceMethod)(nil).FetchJob))
}

// FetchJobByCompanyId mocks base method.
func (m *MockServiceMethod) FetchJobByCompanyId(cid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJobByCompanyId", cid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJobByCompanyId indicates an expected call of FetchJobByCompanyId.
func (mr *MockServiceMethodMockRecorder) FetchJobByCompanyId(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJobByCompanyId", reflect.TypeOf((*MockServiceMethod)(nil).FetchJobByCompanyId), cid)
}

// FetchJobById mocks base method.
func (m *MockServiceMethod) FetchJobById(jid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJobById", jid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJobById indicates an expected call of FetchJobById.
func (mr *MockServiceMethodMockRecorder) FetchJobById(jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJobById", reflect.TypeOf((*MockServiceMethod)(nil).FetchJobById), jid)
}

// UserLogin mocks base method.
func (m *MockServiceMethod) UserLogin(ctx context.Context, email, password string) (v5.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, email, password)
	ret0, _ := ret[0].(v5.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockServiceMethodMockRecorder) UserLogin(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockServiceMethod)(nil).UserLogin), ctx, email, password)
}
