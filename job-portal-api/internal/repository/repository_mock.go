// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	models "job-portal-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockUserRepo) CreateCompany(companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockUserRepoMockRecorder) CreateCompany(companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockUserRepo)(nil).CreateCompany), companyData)
}

// CreateJob mocks base method.
func (m *MockUserRepo) CreateJob(jobData models.Job) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", jobData)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockUserRepoMockRecorder) CreateJob(jobData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockUserRepo)(nil).CreateJob), jobData)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(userData models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), userData)
}

// UserLogin mocks base method.
func (m *MockUserRepo) UserLogin(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserRepoMockRecorder) UserLogin(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserRepo)(nil).UserLogin), email)
}

// ViewAllJobs mocks base method.
func (m *MockUserRepo) ViewAllJobs() ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllJobs")
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllJobs indicates an expected call of ViewAllJobs.
func (mr *MockUserRepoMockRecorder) ViewAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllJobs", reflect.TypeOf((*MockUserRepo)(nil).ViewAllJobs))
}

// ViewCompanies mocks base method.
func (m *MockUserRepo) ViewCompanies() ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanies")
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanies indicates an expected call of ViewCompanies.
func (mr *MockUserRepoMockRecorder) ViewCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanies", reflect.TypeOf((*MockUserRepo)(nil).ViewCompanies))
}

// ViewCompanyById mocks base method.
func (m *MockUserRepo) ViewCompanyById(cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanyById", cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanyById indicates an expected call of ViewCompanyById.
func (mr *MockUserRepoMockRecorder) ViewCompanyById(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanyById", reflect.TypeOf((*MockUserRepo)(nil).ViewCompanyById), cid)
}

// ViewJobByCompanyId mocks base method.
func (m *MockUserRepo) ViewJobByCompanyId(cid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobByCompanyId", cid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobByCompanyId indicates an expected call of ViewJobByCompanyId.
func (mr *MockUserRepoMockRecorder) ViewJobByCompanyId(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobByCompanyId", reflect.TypeOf((*MockUserRepo)(nil).ViewJobByCompanyId), cid)
}

// ViewJobDetailsById mocks base method.
func (m *MockUserRepo) ViewJobDetailsById(jid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobDetailsById", jid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobDetailsById indicates an expected call of ViewJobDetailsById.
func (mr *MockUserRepoMockRecorder) ViewJobDetailsById(jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobDetailsById", reflect.TypeOf((*MockUserRepo)(nil).ViewJobDetailsById), jid)
}
